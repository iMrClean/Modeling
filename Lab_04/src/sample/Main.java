package sample;

import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;

/**
 * Лабораторная работа № 4
 * Задание на лабораторку - реализовать простейшую программную модель, для системы, которая состоит из генератора сообщений, накопителя для этих сообщений и обработчика сообщений.
 * Сообщения генерируются через случайные промежутки времени, которые генерируются по равномерному распределению в некотором интервале [a, b].
 * Затем сообщения попадают в очередь с максимальной длиной L.
 * Если очередь уже полна то сообщение теряется. Из очереди сообщения выбирает обработчик, который обрабатывает их за случайное время, определённоё по распределению Эрланга.
 * Параметры a, b, L и параметры распределения Эрланга должны настраиваться.
 * Программа должна определять размер очереди L, при которой очередь не переполняется.
 * Также должен быть второй режим работы (или тот же, но с ненулевым коэффициентом), в котором некая доля (эта доля должна настраиваться)
 * сообщений возвращается на вход очереди и требует повторной обработки. Надо определить как при этом меняется размер очереди, при котором сообщения не теряются.
 * Задача должна быть решена двумя способами - через дельтуТ и событийным способом.
 */
public class Main extends Application {

    @Override
    public void start(Stage primaryStage) throws Exception{
        Parent root = FXMLLoader.load(getClass().getResource("sample.fxml"));
        primaryStage.setTitle("Hello World");
        primaryStage.setScene(new Scene(root, 300, 275));
        primaryStage.show();
    }


    public static void main(String[] args) {
        launch(args);
    }
}
